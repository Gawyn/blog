<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: agile | Cristian Planas]]></title>
  <link href="http://Gawyn.github.com/blog/blog/categories/agile/atom.xml" rel="self"/>
  <link href="http://Gawyn.github.com/blog/"/>
  <updated>2012-02-03T22:51:08+02:00</updated>
  <id>http://Gawyn.github.com/blog/</id>
  <author>
    <name><![CDATA[Cristian Planas]]></name>
    <email><![CDATA[me@cristianplanas.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[TDD != BDD]]></title>
    <link href="http://Gawyn.github.com/blog/blog/2012/02/03/tdd-equals-bdd/"/>
    <updated>2012-02-03T20:35:00+02:00</updated>
    <id>http://Gawyn.github.com/blog/blog/2012/02/03/tdd-equals-bdd</id>
    <content type="html"><![CDATA[<p>Talking with other developers, sometimes I notice that they use the
terms TDD and BDD. That was specially strange for me in the RuPy 2011,
when I was still not very sure of the difference between those two
software development techniques, and (at least for me) everyone used
them indifferently.</p>

<p>But they are not the same. In fact, BDD is an evolution, or an
extension, of TDD. Let's try to define and point out the difference
between them.</p>

<h2>TDD (Test-Driven Development)</h2>

<blockquote><p>All code is guilty until proven innocent.</p></blockquote>

<p>In the university, we are taught that the main phases of the software are specification, design,
 implementation and testing, in this order. In TDD, testing comes before implementation;
 and thanks to its tools, it can be used as a kind of specification.</p>

<p>In a TDD process, we develop first the test and then we pass to the real
 code until the test accepts it. In an advanced project, when we implement
 a change into the code, we run all the tests, and not only the new one:
 like this we can detect quickly if a new piece of code itâ€™s provoking
 errors in old features.</p>

<p><em>The TDD process:</em>
<img class="center" src="images/tddSteps.jpg" title="TDD" alt="A diagram of TDD"></p>

<h2>BDD (Behavior-Driven Development)</h2>

<p>BDD is a business-like, natural language, user-approach to TDD. In it,
we first define an acceptance test: we execute it and, obviously, it fails.
Then we define a unit test: it fails too. Then, and only then, we can
start with the code itself. When the given unit test passes, we execute
again the acceptance test, and if it fails, we start the process all
over again with a new unit test.</p>

<p>Using Ruby speech, we could say that <strong>BDD wraps an acceptance test
around a group of unit tests.</strong></p>

<p><em>The BDD process:</em>
<img class="center" src="images/atdd.jpg" title="TDD" alt="A diagram of TDD"></p>

<p>In BDD we also try to make tests particularly readable, using tools like
Rspec and Cucumber.</p>

<h2>Conclusion</h2>

<p>Even if it's an expansion, and a good one, BDD is not "better" than TDD.
It's just different. In some cases, using BDD just doesn't have sense.
For example, in a gem or a plugin, to test the behavior of the user is
just impossible.</p>

<p>Actually, developers naturally understand that: they just are confused
by the similar names of B(bi)DD and T(ti)DD. You don't code a gem using
BDD, even if it sounds cool: it's TDD.</p>

<p>PS: Another day we should talk if BDD and TDD are so useful or if it's
only a hype.</p>
]]></content>
  </entry>
  
</feed>
